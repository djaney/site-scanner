#!/usr/bin/env python
from scanner import scanner
import wx
import wx.grid
import threading
import paramiko
from exceptions import IOError

class GridFrame(wx.Frame):
    grid = None
    scanGrid = None
    menuBar = None
    scanMenu = None
    menuStartScan = None
    def __init__(self, parent):

        wx.Frame.__init__(self, parent)
        self.grid = wx.grid.Grid(self, -1)

        # Menu
        self.menuBar = wx.MenuBar()

        self.scanMenu = wx.Menu()
        self.menuBar.Append(self.scanMenu, '&Scan')
        
        self.menuStartScan = self.scanMenu.Append(-1, 'Start', 'Start Scanning')
        self.Bind(wx.EVT_MENU, self.onMenuStartScan,self.menuStartScan)
        #status bar
        self.CreateStatusBar(style=0)
        self.SetStatusText("Ready")


        self.SetTitle('Site Checker')
        self.SetMenuBar(self.menuBar)
        self.Centre()

        


        self.scanGrid = ScannerGrid(self)



        self.Show(True)



    def onMenuStartScan(self,event):
        self.scanGrid.startScan()


class ScanThread(threading.Thread):
    callback = None
    scanner = None
    def __init__(self,scanner=None, callback=None):
        self.scanner = scanner
        self.callback = callback
        threading.Thread.__init__(self,target=self.scanner.scan)

    def run(self):
        threading.Thread.run(self)
        if self.callback!=None:
            self.callback(self.scanner)

class ScannerGrid:
    scans = []
    frame = None
    def __init__(self,frame,urls = []):
        self.frame = frame
        self.grid = frame.grid


        self.grid.CreateGrid(1,4)


        self.grid.SetColLabelValue(0,"URL")
        self.grid.SetColLabelValue(1,"HTTP")
        self.grid.SetColLabelValue(2,"Status")
        self.grid.SetColLabelValue(3,"Latency")

        self.grid.SetColSize(0,500)

        self.grid.ClearGrid()

    def startScan(self):
        self.frame.SetStatusText("Getting sites...")
        urls = []
        sites = getSites()
        for s in sites:
            urls.append('http://'+s)
        
        self.scan(urls)

    def scan(self,urls = []):
        self.grid.DeleteRows( 0, self.grid.GetNumberRows())
        self.grid.AppendRows(len(urls))
        self.scans = []
        for u in urls:
            scn = scanner(u)
            self.scans.append(scn)
            t = ScanThread(scanner=scn,callback=self.onScanFinished)
            t.start()

        self.renderRows()

    def onScanFinished(self,scanner):
        self.renderRows()

    def renderRows(self):
        row = 0
        total = len(self.scans)
        done = 0
        for s in self.scans:
            if s.scanned:
                done+=1

            if s.code<0:
                code = ''
                status = 'Scanning...'
                ttfb = ''
            else:
                code = str(s.code)
                status = s.status
                ttfb = str(s.ttfb)+'s'

            self.grid.SetCellValue(row, 0, s.url)
            self.grid.SetCellValue(row, 1, code)
            self.grid.SetCellValue(row, 2, status.upper())
            self.grid.SetCellValue(row, 3, ttfb)

            if s.code==200:
                self.grid.SetCellBackgroundColour(row, 2, wx.GREEN)
            elif s.code>=0:
                self.grid.SetCellBackgroundColour(row, 2, wx.RED)
            else:
                self.grid.SetCellBackgroundColour(row, 2, wx.WHITE)

            if s.ttfb>0 and s.ttfb>=10:
                self.grid.SetCellBackgroundColour(row, 3, wx.RED)
            else:
                self.grid.SetCellBackgroundColour(row, 3, wx.WHITE)

            row+=1
        if total==0:
            frame.SetStatusText('Scanning...')
        elif total==done:
            frame.SetStatusText('Done')
        else:
            frame.SetStatusText('Scanning %i of %i' % (done,total))


def getSites():

    output = ''
    try:
        sites = open("scanwin.csv", "r")
    except IOError, e:
        print "scanwin.csv not found"
    finally:
        return sites.readlines()


if __name__ == '__main__':

    app = wx.App(0)
    frame = GridFrame(None)



    app.MainLoop()